"""""""""""""""""""""""""""""""
" Basic Settings:
"
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

"""""""""""""""""""""""""""""""
" Plugins Settings:
"
" Vim-LaTeX
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex' " Sets .tex to be LaTeX file type
let g:Tex_ViewRule_pdf='open'

" NERDComments plugin
let NERDCommentWholeLinesInVMode=1
let NERDSpaceDelims=1

" Tags, completetion, OmniCpp preferences:
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
set tags+=~/.vim/tags/cpp
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_SelectFirstItem = 2 " select without inserting
" automatically open and close the popup menu / preview window
" au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

" SnipMate settings
let g:snips_author = 'Sam Britt <samuelbritt@gmail.com>'

" DelimitMate settings
let delimitMate_balance_matchpairs = 1
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1

" restores normal vim keybindings for macvim
if has("gui_macvim")
	let macvim_skip_cmd_opt_movement = 1
endif

"""""""""""""""""""""""""""""""
" Colors:
"
" Switch syntax highlighting on, when the terminal has colors
" Needs to come after filetype plugin indent on
if &t_Co > 2 || has("gui_running")
	syntax on
	syntax sync minlines=50
endif

" Colorscheme
if has("gui_running")
	"see .gvimrc
else
	set bg=dark
	set t_Co=256 " breaks on OS X
	colorscheme peaksea_regular
endif

"""""""""""""""""""""""""""""""
" Maps And Commands:
"
" more logical behavior of Y
nmap Y y$

" alternate escape
" imap kj <ESC> " (mapped caps lock to esc)

" make the . command return to the point where the command started
noremap . .`[

" Push line down, up in command mode (can delete lines)
nnoremap + maO<esc>`a
nnoremap _ makdd`a

" Move line(s) up or down (swaps with adjacent lines
nmap <M-=> mz:m+<CR>`z
nmap <M--> mz:m-2<CR>`z
vmap <M-=> :m'>+<CR>`<my`>mzgv`yo`z
vmap <M--> :m'<-2<CR>`>my`<mzgv`yo`z

" put current word on commandline
cmap <F2> <C-R><C-W>

" TagList Toggle
map <F2> :TlistToggle<CR>

" TaskList Toggle
map <F3> :TaskList<CR>

" Write buffer through sudo
cnoreabbrev w!! w !sudo tee % >/dev/null

" Reset leader to something easier to type
let mapleader = ","

" ` is more useful but less accessible than '
nnoremap ' `
nnoremap ` '

" unhighlight after search
nmap <silent> <leader>n :silent :nohlsearch<CR>

" Filename, line, and tag completion
inoremap <C-F> <C-X><C-F>
inoremap <C-L> <C-X><C-L>
inoremap <C-]> <C-X><C-]>

" Easier buffer switching with Alt key
set winaltkeys=no	" turns off Alt for menu navigation
nmap <silent> <M-k> :wincmd k<CR>
nmap <silent> <M-j> :wincmd j<CR>
nmap <silent> <M-h> :wincmd h<CR>
nmap <silent> <M-l> :wincmd l<CR>
nmap <silent> <M-w> :wincmd w<CR>
nmap <silent> <M-`> :wincmd w<CR>
nmap <silent> <M-o> :wincmd o<CR>
imap <silent> <M-k> <C-o>:wincmd k<CR>
imap <silent> <M-j> <C-o>:wincmd j<CR>
imap <silent> <M-h> <C-o>:wincmd h<CR>
imap <silent> <M-l> <C-o>:wincmd l<CR>
imap <silent> <M-w> <C-o>:wincmd w<CR>
imap <silent> <M-`> <C-o>:wincmd w<CR>
imap <silent> <M-o> <C-o>:wincmd o<CR>

" Command to change to the directory of the current window (LCD) and all
" windows (GCD)
command! CD lcd %:p:h
command! LCD lcd %:p:h
command! GCD cd %:p:h

" Command to see the difference between the current buffer and the file it was
" loaded from, thus the changes you made.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

" Function to trim trailing white spaces
function! <SID>TrimTrailingSpaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e
	call cursor(l, c)
endfunction
command! TrimTrailingSpaces :call <SID>TrimTrailingSpaces()

" Highlight trailing whitespace
" highlight TrailingSpaces ctermbg=darkgreen guibg=lightgreen
" au ColorScheme * highlight TrailingSpaces guibg=lightgreen
au BufEnter * match TODO /\s\+$/
au InsertEnter * match TODO /\s\+\%#\@<!$/
au InsertLeave * match TODO /\s\+$/

"""""""""""""""""""""""""""""""
" Preferences:
"
source $VIMRUNTIME/macros/matchit.vim		" % matching

" show arrow at beginning of wrapped lines
let &sbr = nr2char(8618).' '

" Give windows equal space after resizing or opening a new window
autocmd VimResized * wincmd =
autocmd BufWinEnter * wincmd =

" Various settings
set backspace=indent,eol,start 	" backspace over everything
set whichwrap+=<,>,[,]		" changing lines with arrow keys
set history=50			" keep 50 lines of command line history
set ruler			" show the cursor position all the time
set showcmd			" display incomplete commands
set incsearch			" do incremental searching
set hlsearch			" highlight search
set mouse=a 			" enable the mouse
set dir=~/.swp			" don't litter project with ~ files
set wildmenu			" tab completion on commands
set wildmode=longest:full,list:full 		" bash compatible behavior
set completeopt=menuone,menu,longest,preview	" insert completion
set ignorecase			" ingnore case in searches
set smartcase			" don't ignore case with uppercase in pattern
set viminfo+='100,f1 		" history between sessions
set nostartofline 		" keeps cursor in same spot when scrolling
set showmatch 			" highlight matching braces
set matchtime=1                 " showmatch is annoying
" set noshowmatch			" showmatch is annoying
set hidden 			" allow switching buffers without saving
set title 			" better titles in terminals
set scrolloff=3 		" keep some context when scrolling
set linebreak                   " wrap lines sanely
set foldcolumn=1		" click to fold
