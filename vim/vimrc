
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  filetype plugin indent on

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif


else

  set autoindent		" always set autoindenting on

endif " has("autocmd")


" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
" Needs to come after filetype plugin indent on
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

" put in for macvim
" restores normal vim keybindings
if has("gui_macvim")
	let macvim_skip_cmd_opt_movement = 1
endif

" Filetype Settings:
" Vim-LaTeX
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex' " Sets .tex to be LaTeX file type
let g:Tex_ViewRule_pdf='open'

" Matlab
autocmd BufEnter *.m compiler mlint

" User Preferences:
source $VIMRUNTIME/macros/matchit.vim
"set wildmode=longest,full " bash compatible behavior
set wildmode=longest:full,list:full " bash compatible behavior
"set iskeyword-=_ "underscore as word delimiter
set ignorecase
set viminfo+='100,f1
set nostartofline
nmap :W :w
imap jk <ESC>
imap kj <ESC>

" for NERDComments plugin
let NERDCommentWholeLinesInVMode=1
let NERDSpaceDelims=1

" Insert blank line below, above in command mode
nnoremap + maO<esc>`a
nnoremap _ makdd`a

if has("gui_running")
	set bg=light
	set guioptions-=T
	"SEE .gvimrc
else
	set bg=dark
	colorscheme desert
endif

" Tags, completetion preferences:
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
set tags+=~/.vim/tags/cpp
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_SelectFirstItem = 2 " select without inserting
set wmnu
set completeopt=menuone,menu,longest,preview
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

set dir=~/.swp

" show arrow at beginning of wrapped lines
let &sbr = nr2char(8618).' '

" Give windows equal space after resizing or opening a new window
autocmd VimResized * wincmd =
autocmd BufWinEnter * wincmd =
