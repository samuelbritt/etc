snippet test "Cutest test" !b
void test_${1:foo}(CuTest *tc)
{
	${2:CuFail(tc, "Not yet implemented");}
}
	SUITE_ADD_TEST(suite, test_$1);${0}
endsnippet

snippet suite "Create Cutest test suite" !b
#include "CuTest.h"

/* Tests */


/* Suite */
CuSuite* ${1:`!p snip.rv = snip.basename`}_get_suite()
{
	CuSuite *suite = CuSuiteNew();

	${2:/* SUITE_ADD_TEST calls */}

	return suite;
}
CuSuite* $1_get_suite();
	CuSuiteAddSuite(suite, $1_get_suite());${0}
endsnippet

snippet tests "Boiler plate for running all Cutest tests" !b
#include <stdio.h>
#include <stdlib.h>
#include "CuTest.h"

${1:/* *_get_suite() declarations... */}
void run_all_tests(void) {
	CuString *output = CuStringNew();
	CuSuite *suite = CuSuiteNew();

	${2:/* CuSuiteAddSuite() calls... */}

	CuSuiteRun(suite);
	CuSuiteSummary(suite, output);
	CuSuiteDetails(suite, output);
	printf("%s\n", output->buffer);

	free(output);
	free(suite);
}

int main(int argc, const char *argv[])
{
	run_all_tests();
	return 0;
}
endsnippet

snippet cuptr "CuAssertPtrEquals"
CuAssertPtrEquals(tc, ${1:exp}, ${2:act});$0
endsnippet

snippet cuint "CuAssertIntEquals"
CuAssertIntEquals(tc, ${1:exp}, ${2:act});$0
endsnippet

snippet custr "CuAssertStrEquals"
CuAssertStrEquals(tc, ${1:exp}, ${2:act});$0
endsnippet

snippet cuass "CuAssertTure"
CuAssertTrue(tc, ${1:expression});$0
endsnippet
