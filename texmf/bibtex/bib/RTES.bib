Automatically generated by Mendeley 1.7.1
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Lu1999,
annote = {EDF: "Earliest deadline first"

        
control variable: dealine miss ratio
manipulated var: CPU util (load) *requested* by all *accepted* tasks
 - other possiblity: periods/deadlines of tasks
actuators: service level controller called first) and admission controller (called if SL Controller can't do the job)

        
tasks = (I, ET, Val, S, D)
I = (Ti1, Ti2, ..., Tik) k versions (service levels) of the same task
For each version Tij, normal (not worst) exe time is ETij and value is Valij: longer ET and higher Val means higher service level
Si, Di: start time and (soft) deadline.

        
Workload:
WCET, BCET (worst case, best case exe time)
AET, EET (actual average, expected exe time)
EET = 1/2 (WCET + BCET)
AET = EET * eft
eft > 1 => actual is greater than expected

        
Weakness: give some (unproven) theory about the ranges on coeffeicients, but don't really state their effect on the response (no parametric study). No looking at derivative/integral control separately. No tuning of requirements---stated goal of 1\% MRA, but can jum as high as 10\%. Is that OK?

        
Strength: very good at walking through figure 9, though I'd like to see either eft plotted on the same graph, or the graph annotated with the new values of etf at the relevant points.

        
Evaluation metrics:
MRA: miss ratio among admitted tasks (no. misses/no. admitted tasks) 
CPU Util.
HRS: hit ratio among sumbitted tasks (no. tasks completed within deadline/no. admitted tasks)
VCR: value completeion ratio (sum of vals of hits/sum of vals of submitted tasks)

      },
author = {Lu, C. and Stankovic, J.a. and Tao, G. and Son, S.H.},
doi = {10.1109/REAL.1999.818828},
file = {:Users/sam/Documents/Mendeley Desktop/Lu et al. - 1999 - Design and evaluation of a feedback control EDF scheduling algorithm.pdf:pdf},
isbn = {0-7695-0475-2},
journal = {Proceedings 20th IEEE Real-Time Systems Symposium},
keywords = {03a},
mendeley-tags = {03a},
pages = {56--67},
publisher = {IEEE Comput. Soc},
title = {{Design and evaluation of a feedback control EDF scheduling algorithm}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=818828},
year = {1999}
}
@inproceedings{Li2000,
address = {San Jose, CA},
annote = {automatically infers b/w reqs. through fill level of per-flow queue

        
Flow types:
real rate: need a minimum rate, but if more is given they won't use it (e.g., video playback)
greedy: will take as little or as much as you give it (file transfer)

        
Network controls:
congestion ctrl: bw doesn't exceed end-to-end bottleneck
flow ctrl: sending rate doesn't exceed receiving rate

        
BW allocation: limited by the minimum of 
 - flow's application-level requirement
 - tcp congenstion control limit
 - tcp flow control limit
 - available interface bw

        
Proportion-perioid:
RAMP guarantees x\% of total bw for interval y
(all flows get same period)

        
requires app-level support to determine greedy/real rate
 - all greedy treated as a single real-rate w/ default minimum

        
monitoring implemented using system calls from user level!!!

        
sensitivity to PID parameters? Won't those affect the repsonse time, settling time, and overshoot?},
author = {Li, Kang and Walpole, Jonathan and McNamee, Dylan and Pu, Calton and Steere, David C},
booktitle = {Multimedia Computing and Networking},
file = {:Users/sam/Documents/Mendeley Desktop/Li et al. - 2000 - A rate-matching packet scheduler for real-rate applications.pdf:pdf},
keywords = {04a},
mendeley-tags = {04a},
publisher = {SPIE},
title = {{A rate-matching packet scheduler for real-rate applications}},
url = {http://www.cs.pdx.edu/~walpole/papers/mmcn2001.pdf},
year = {2000}
}
@article{Curbera2003,
annote = {BPEL4WS:
Business Process Execution language for Web Services
 - provides a mechanism for defining service compositions
 - defines coreography: aggregation of services according to business rules

        
WS-Coordination, WS-Transaction
 - provide mechanisms for defining specific standard protocols

        
Ridiculously generic statements: "In order to coordinate a set of Web services, the coordination client starts the coordination by sending a request message to the Activation service of a chosen coordinator." What?},
author = {Curbera, Franscisco and Khalaf, Rania and Mukhi, Nirmal and Tai, Stefan and Weerawarana, Sanjiva},
file = {:Users/sam/Documents/Mendeley Desktop/Curbera et al. - 2003 - The next step in web services.pdf:pdf},
journal = {Communications of the ACH},
keywords = {05a},
mendeley-tags = {05a},
number = {10},
pages = {29--34},
title = {{The next step in web services}},
url = {http://dl.acm.org/citation.cfm?id=944234},
volume = {46},
year = {2003}
}
@inproceedings{Koh2006,
abstract = {Network server consolidation has become popular through virtualization technology that builds secure, isolated network systems on shared hardware. One of the virtualization techniques used is that of user-level operating systems. (ULOSes) However, the isolation and security they bring comes at the price of performance, as virtualization introduces a number of overheads into the system. Such overheads can be surprisingly large, especially for complex OS modules like network protocol stacks. Our studies of the TCP/IP stack in user-mode Linux (UML), an implementation of a ULOS, attribute the resulting slow-downs to three main sources: the execution of privileged code, memory management across layers, and additional instructions to execute. To mitigate these bottlenecks, we present five optimization techniques, improving the network performance significantly, reducing packet processing latency by 60\% and increasing network throughput by three folds. Furthermore, the network throughput of the improved ULOS is comparable to that of native Linux up to gigabit speeds},
annote = {User level OS (microkernel? virtualization? user level virtualization a la VMWare/virtualbox?)

        
Running privileged instructions on a ULOS: methods:
 - pure: dynamic binary translations on the fly
 - static code rewrite (compile time)
 - port the guest OS: guest knows exactly which host its running on (method used in this paper (UML))

        
ULOS slow because:
1. Privilege management: ULOS must go through host to provide kernel services
  - kernel is designed assuming access to kernel data structures is fast. Now everything is a (slow) system call accross kernel boundaries
2. Memory management:
   - memory copies through ULOS: a packet is copied from application to ULOS space, then ULOS to host kernel space (40\% of latency!)
   - vitrual address translations: no access to TLB or page table manipulation
3. Additional instructions: virtual I/O devices

        
Consider an outgoing UDP packet:
1. User -> UML crossing via application calling "sendto()"
2. Packet processing in UML: router decisions, header filing, network queue processing, packet forwarding
3. UML->host kernel crossing: UML sends processed packet to virtual network device which sends to host
4. Packet processing in host: forwarding to physical device (ethernet)
5. physical device driver sends out through NIC

        
User Level Signal masking
 - UML must enable/disable interrupts using sigprocmask, which is slow. Soln: store interrupts in user space data structure},
author = {Koh, Younggyun and Pu, Calton and Bhatia, Sapan and Consel, Charles},
booktitle = {Proceedings. 2006 31st IEEE Conference on Local Computer Networks},
doi = {10.1109/LCN.2006.322071},
file = {:Users/sam/Documents/Mendeley Desktop/Koh et al. - 2006 - Efficient Packet Processing in User-Level OSes A Study of UML.pdf:pdf},
isbn = {1-4244-0418-5},
issn = {0742-1303},
keywords = {10A},
mendeley-tags = {10A},
month = nov,
pages = {63--70},
publisher = {IEEE},
title = {{Efficient Packet Processing in User-Level OSes: A Study of UML}},
url = {http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4116527},
year = {2006}
}
@article{Steere1999,
annote = {FC control on scheduling
measuring "progress" of jobs (note: better than missed deadlines, probably harder to measure)
controlling "proportion" and "period of CPU (offers fine grained control)

        
measuring progress
 - requires app-level support (prod/cons buffer size, app role)?
 - can use heuristics (determine whether app blocks, or uses what it requires). Same thing priority uses.

        
implemented with linux's goodness property

        
uses PID control

        
i'm worried that there are too many scheduling "special cases"--- real time, real rate, aperiodic, interactive, etc. is this easily determinable or do apps have to tell you? do threads always fall into one of these categories?

        
"believe" they can reduce the oscillation---will PID parameter adjustments help? what are those numbers?},
author = {Steere, David C and Goel, Ashvin and Gruenberg, Joshua and Mcnamee, Dylan and Pu, Calton and Walpole, Jonathan},
file = {:Users/sam/Documents/Mendeley Desktop/Steere et al. - 1999 - A Feedback-driven Proportion Allocator for Real-Rate Scheduling.pdf:pdf},
keywords = {03b},
mendeley-tags = {03b},
title = {{A Feedback-driven Proportion Allocator for Real-Rate Scheduling}},
year = {1999}
}
@inproceedings{Bhatia2004,
annote = {Goal: dynamically generate and load specialized code for network protocols at the application's request

        
thorough specialization: reduce code to specific case of app for performance improvements
conservative specialization: preserve the usage scope of the system

        
hinges on knowlege of program invarients which can allow for eliminating conditionals, use of instruction immediates rather than memory lookups, and resulting code has better cache properties},
author = {Bhatia, Sapan and Consel, Charles and {Le Meur}, Anne-Francoise and Pu, Calton},
booktitle = {IEEE International Conference on Local Computer Networks},
file = {:Users/sam/Documents/Mendeley Desktop/Bhatia et al. - 2004 - Automatic Specialization of Protocol Stacks in Operating System Kernels.pdf:pdf},
keywords = {09b},
mendeley-tags = {09b},
pages = {152--159},
title = {{Automatic Specialization of Protocol Stacks in Operating System Kernels}},
year = {2004}
}
@article{Koh2009,
annote = {I/O implementation methods:
1. Device emulation (FV)
2. Virtual-Device drivers (PV)
3. "Socket Outsourcing": replace guest's network processing with that of host

        
Linsock approach:
fully virutalized Windows guest on Linux host
all network processing delegated to linux
layer of indirection from Windows sockets to BSD socket interfaces

        
security concerns? perhaps no more than running an app on Linux

        
implementation of VM RPC limited to Intel VT-enabled cpus
 - perhaps limts functionality: want fully virtualized Windows to run on a wide variety of platforms

        
really good throughput performance---b/c can send large messages to host w/o emulating a device or segmenting into packets},
author = {Koh, Younggyun and Pu, Calton and Shinjo, Yasushi and Eiraku, Hideki and Saito, Go and Nobori, Daiyuu},
doi = {10.1109/NCA.2009.49},
file = {:Users/sam/Documents/Mendeley Desktop/Koh et al. - 2009 - Improving Virtualized Windows Network Performance by Delegating Network Processing.pdf:pdf},
isbn = {9780769536989},
journal = {2009 Eighth IEEE International Symposium on Network Computing and Applications},
keywords = {10B},
mendeley-tags = {10B},
month = jul,
pages = {203--210},
publisher = {Ieee},
title = {{Improving Virtualized Windows Network Performance by Delegating Network Processing}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5190373},
year = {2009}
}
@inproceedings{Malkowski2010,
annote = {We have lots of data, but still rely on analytical modeling for configuration management

        
"rare" bottlenecks becoming more common

        
single-bottleneck: satruated resource exhibits linearly load-dependent utilization up to 100\%

        
multi-bottleneck: classified according to resource dependencies and frequency of resource saturation---difficult or impossible to analyze, need data-based approach

        
CloudXPlor modules:
response time analysis  (correlated with SLA), throughput analysis (correlated with costs),
cost/revenue analysys, profit analysis

        
Do the experimental results require the infrastructure to already be in place to get the data? What good is it  for the tool to tell me it is more profitable to have a smaller infrastructure?},
author = {Malkowski, Simon and Neumann, Dirk and Hedwig, Markus and Jayasinghe, D},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
file = {:Users/sam/Documents/Mendeley Desktop/Malkowski et al. - 2010 - CloudXplor A tool for configuration planning in clouds based on empirical data.pdf:pdf},
isbn = {9781605586380},
keywords = {04b,cloud,configuration planning,n-tier applications,rubbos},
mendeley-tags = {04b},
pages = {391--398},
publisher = {ACM},
title = {{CloudXplor: A tool for configuration planning in clouds based on empirical data}},
url = {http://dl.acm.org/citation.cfm?id=1774172},
year = {2010}
}
@article{Lee2007,
author = {Lee, O},
title = {{Utilizing knowledge evolution in intelligent transport systems.}},
url = {http://www.freepatentsonline.com/article/Journal-Academy-Business-Economics/172010697.html},
year = {2007}
}
@article{Abdelzaher1998,
author = {Abdelzaher, T. and Shin, K.G.},
doi = {10.1109/RTTAS.1998.683195},
file = {:Users/sam/Documents/Mendeley Desktop/Abdelzaher, Shin - 1998 - End-host architecture for QoS-adaptive communication.pdf:pdf},
isbn = {0-8186-8569-7},
journal = {Proceedings. Fourth IEEE Real-Time Technology and Applications Symposium},
keywords = {02b},
mendeley-tags = {02b},
pages = {121--130},
publisher = {IEEE Comput. Soc},
title = {{End-host architecture for QoS-adaptive communication}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=683195},
year = {1998}
}
@incollection{Crnkovic,
author = {Crnkovic, Ivica and \AA kerholm, Mikael and Fredriksson, Johan and Norstr\"{o}m, Christer},
chapter = {3},
file = {:Users/sam/Documents/Mendeley Desktop/Crnkovic et al. - Unknown - System and Software Life Cycle Process.pdf:pdf},
keywords = {12b},
mendeley-tags = {12b},
pages = {1--16},
title = {{System and Software Life Cycle Process}}
}
@article{Dalgic1999,
author = {Dalgic, Ismail and Fang, Hanlin},
file = {:Users/sam/Documents/Mendeley Desktop/Dalgic, Fang - 1999 - Comparison of H. 323 and SIP for IP Telephony Signaling.pdf:pdf},
journal = {Proc. of Photonics East},
keywords = {11b,323,call control,h,ip telephony,signaling,sip,voice over ip},
mendeley-tags = {11b},
title = {{Comparison of H. 323 and SIP for IP Telephony Signaling}},
url = {http://ice-voip-system.googlecode.com/svn/trunk/doc/Zrodla/Dalg9909\_Comparison.pdf},
year = {1999}
}
@article{Sangiovanni-Vincentelli2007,
annote = {pretty poorly written: what's the thesis? when is he talking about the present, and when is he talking about the future? (e.g. platform-based design)
poor explanation of graphs and tables},
author = {Sangiovanni-Vincentelli, A and Natale, Marco Di},
file = {:Users/sam/Documents/Mendeley Desktop/Sangiovanni-Vincentelli, Natale - 2007 - Embedded system design for automotive applications.pdf:pdf},
journal = {Computer},
keywords = {12a},
mendeley-tags = {12a},
title = {{Embedded system design for automotive applications}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4343688},
year = {2007}
}
@article{Singaravelu2006,
author = {Singaravelu, Lenin and Pu, Calton and Hartig, Hermann and Helmuth, Christian},
file = {:Users/sam/Documents/Mendeley Desktop/Singaravelu et al. - 2006 - Reducing TCB Complexity for Security-Sensitive Applications Three Case Studies.pdf:pdf},
journal = {EuroSys},
keywords = {11a,application security,trusted computing base},
mendeley-tags = {11a},
pages = {161--174},
title = {{Reducing TCB Complexity for Security-Sensitive Applications: Three Case Studies}},
year = {2006}
}
@article{Perera2006,
author = {Perera, S and Herath, C},
file = {:Users/sam/Documents/Mendeley Desktop/Perera, Herath - 2006 - Axis2, middleware for next generation web services.pdf:pdf;:Users/sam/Documents/Mendeley Desktop/Perera, Herath - 2006 - Axis2, middleware for next generation web services(2).pdf:pdf},
journal = {Web Services, 2006. \ldots},
keywords = {05a},
mendeley-tags = {05a},
title = {{Axis2, middleware for next generation web services}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4032100},
year = {2006}
}
@article{Wang2011,
author = {Wang, Q and Malkowski, S},
file = {:Users/sam/Documents/Mendeley Desktop/Wang, Malkowski - 2011 - The Impact of Soft Resource Allocation on n-Tier Application Scalability.pdf:pdf},
journal = {Parallel \& Distributed \ldots},
keywords = {04b},
mendeley-tags = {04b},
title = {{The Impact of Soft Resource Allocation on n-Tier Application Scalability}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=6012911},
year = {2011}
}
@inproceedings{Sakaki2010,
abstract = {Twitter, a popular microblogging service, has received much attention recently. An important characteristic of Twitter is its real-time nature. For example, when an earthquake occurs, people make many Twitter posts (tweets) related to the earthquake, which enables detection of earthquake occurrence promptly, simply by observing the tweets. As described in this paper, we investigate the real-time inter- action of events such as earthquakes, in Twitter, and pro- pose an algorithm to monitor tweets and to detect a target event. To detect a target event, we devise a classifier of tweets based on features such as the keywords in a tweet, the number of words, and their context. Subsequently, we produce a probabilistic spatiotemporal model for the tar- get event that can find the center and the trajectory of the event location. We consider each Twitter user as a sensor and apply Kalman filtering and particle filtering, which are widely used for location estimation in ubiquitous/pervasive computing. The particle filter works better than other com- pared methods in estimating the centers of earthquakes and the trajectories of typhoons. As an application, we con- struct an earthquake reporting system in Japan. Because of the numerous earthquakes and the large number of Twit- ter users throughout the country, we can detect an earth- quake by monitoring tweets with high probability (96\% of earthquakes of Japan Meteorological Agency (JMA) seis- mic intensity scale 3 or more are detected). Our system detects earthquakes promptly and sends e-mails to regis- tered users. Notification is delivered much faster than the announcements that are broadcast by the JMA.},
address = {Raleigh, North Carolina},
author = {Sakaki, Takeshi and Okazaki, Makoto and Matsuo, Yutaka},
booktitle = {WWW},
file = {:Users/sam/Documents/Mendeley Desktop/Sakaki, Okazaki, Matsuo - 2010 - Earthquake Shakes Twitter Users Real-time Event Detection by Social Sensors.pdf:pdf},
keywords = {14a},
mendeley-tags = {14a},
title = {{Earthquake Shakes Twitter Users: Real-time Event Detection by Social Sensors}},
year = {2010}
}
@inproceedings{Dean2004,
abstract = {MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key. Many real world tasks are expressible in this model, as shown in the paper. Programs written in this functional style are automatically parallelized and executed on a large cluster of commodity machines. The run-time system takes care of the details of partitioning the input data, scheduling the program’s execution across a set of machines, handling machine failures, and managing the required inter-machine communication. This allows programmers without any experience with parallel and distributed systems to easily utilize the resources of a large distributed system. Our implementation of MapReduce runs on a large cluster of commodity machines and is highly scalable: a typical MapReduce computation processes many terabytes of data on thousands of machines. Programmers find the system easy to use: hundreds of MapReduce programs have been implemented and upwards of one thousand MapReduce jobs are executed on Google’s clusters every day.},
annote = {strengths:
 - real-world examples, and discussions on experience
 - optimization features such as input file locality and backup tasks---examples of solving the kinds of problems that arise in large scale computing that would otherwise be overlooked
 - example of how restricting the programming model can make it easier to parallelize},
author = {Dean, Jeffrey and Ghemawat, Sanjay},
booktitle = {6th Symposium on Operating Systems Design and Implementation},
file = {:Users/sam/Documents/Mendeley Desktop/Dean, Ghemawat - 2004 - MapReduce Simplified Data Processing on Large Clusters.pdf:pdf},
keywords = {11b},
mendeley-tags = {11b},
pages = {137--149},
publisher = {USENIX Association},
title = {{MapReduce: Simplified Data Processing on Large Clusters}},
year = {2004}
}
@article{Caldwell1961,
author = {Caldwell, Tom},
doi = {10.1145/366105.366184},
issn = {00010782},
journal = {Communications of the ACM},
month = feb,
number = {2},
pages = {107--108},
title = {{On finding minimum routes in a network with turn penalties}},
url = {http://dl.acm.org/citation.cfm?id=366105.366184},
volume = {4},
year = {1961}
}
@article{Winter2002,
author = {Winter, S},
file = {:Users/sam/Documents/Mendeley Desktop/Winter - 2002 - Modeling costs of turns in route planning.pdf:pdf},
journal = {GeoInformatica},
title = {{Modeling costs of turns in route planning}},
url = {http://www.springerlink.com/index/P505V60N26P78266.pdf},
year = {2002}
}
@article{McNamee2001,
author = {McNamee, Dylan and Marlet, Renauld and Walpole, Jonathan and Pu, Calton and Cowan, Crispin and Krasic, Charles and Goel, Ashvin and Wagle, Perry and Consel, Charles and Muller, Gilles},
doi = {10.1145/377769.377778},
file = {:Users/sam/Documents/Mendeley Desktop/McNamee et al. - 2001 - Specialization tools and techniques for systematic optimization of system software.pdf:pdf},
issn = {07342071},
journal = {ACM Transactions on Computer Systems},
keywords = {07b},
mendeley-tags = {07b},
month = may,
number = {2},
pages = {217--251},
title = {{Specialization tools and techniques for systematic optimization of system software}},
url = {http://portal.acm.org/citation.cfm?doid=377769.377778},
volume = {19},
year = {2001}
}
